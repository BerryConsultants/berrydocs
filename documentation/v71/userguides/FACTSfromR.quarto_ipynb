{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"FACTS from R\"\n",
        "subtitle: \"Calling FACTS from the R command line\"\n",
        "title-block-banner: '#125740'\n",
        "title-block-banner-color: white\n",
        "format: \n",
        "  html:\n",
        "    toc: true\n",
        "    toc-depth: 4\n",
        "    toc-title: \"Table of Contents\"\n",
        "---\n",
        "\n",
        "#  Introduction\n",
        "\n",
        "## Purpose and Scope of this document\n",
        "\n",
        "This document describes usage and how to utilize “R” to run FACTS. It is\n",
        "intended for anyone requiring posterior probabilities and decisions that\n",
        "FACTS does not include. It can be used to:\n",
        "\n",
        "1.  Simulate trials that require posterior quantities that FACTS does not include, e.g.:\n",
        "    a.  The probability that a dose has a treatment effect in a certain range\n",
        "\n",
        "2.  Simulate trials that make decisions that FACTS does not include,\n",
        "    e.g.:\n",
        "    a.  Sample size re-assessment\n",
        "    b.  Retain the dose meeting goal X and the next lowest dose\n",
        "\n",
        "**Warning: this process is not very forgiving of errors, nor very\n",
        "informative when they occur. It is recommended you start with the\n",
        "supplied example and then modify that in steps to the case you actually\n",
        "wish to analyze or simulate.**\n",
        "\n",
        "# Calling FACTS from R\n",
        "\n",
        "## Software prerequisites\n",
        "\n",
        "To call FACTS from R, you will need the following installed on your\n",
        "Windows machine on which you are using FACTS:\n",
        "\n",
        "- A reasonably recent version of R (v3.5.3+).\n",
        "- FACTS v6.4 or later, the command line executable versions of the FACTS simulation engines – these are currently available to Enterprise licensees.\n",
        "- The supplied R file: factR.R\n",
        "\n",
        "## factR.R\n",
        "\n",
        "Provides an ‘R’ wrapper for accessing FACTS analysis models for:\n",
        "\n",
        "1.  Core and Enrichment Design, allowing you to use the following FACTS\n",
        "    analysis features:\n",
        "    a.  Dose Response models\n",
        "    b.  Longitudinal models\n",
        "    c.  Hierarchical Prior on Control (borrowing from historical data)\n",
        "    d.  TTE predictor endpoint\n",
        "    e.  BAC\n",
        "\n",
        "2.  Inputs\n",
        "    a.  FACTS param file with trial info and model specifications\n",
        "    b.  Data file\n",
        "\n",
        "3.  Output\n",
        "    a.  MCMC file\n",
        "\n",
        "## Steps for calling FACTS from R\n",
        "\n",
        "To call FACTS from R, you will need to do the following sequence of\n",
        "steps:\n",
        "\n",
        "1.  Create a (non-adaptive) FACTS project for your Engine type with the\n",
        "    general study info: Number of Arms, number and timing of Visits (if\n",
        "    using), Dose response (& longitudinal if using) model specification\n",
        "    and MCMC setup.\n",
        "2.  Configure VSR and Execution profiles to allow a simple simulation\n",
        "    run.\n",
        "3.  Run 1 simulation to produce:\n",
        "    a.  A ‘param’ file which will be passed as an input to the R\n",
        "        function.\n",
        "    b.  A ‘patients’ file. This may be useful to illustrate data file\n",
        "        format for the input data. See FACTS Execution Guides for\n",
        "        details.\n",
        "    c.  An ‘mcmc’ file. This will show you what to expect in the output\n",
        "        MCMC file.\n",
        "4.  If using FACTS to analyze a data set, then\n",
        "    a.  put the data set into the required format\n",
        "    b.  write an R script to call FACTS with the data set\n",
        "    c.  process the MCMC output\n",
        "5.  If using FACTS within a simulation framework, then:\n",
        "    a.  Write an R script that generates the data you wish to simulate\n",
        "        and pass to FACTS to analyze\n",
        "    b.  Write a loop that\n",
        "        -  generates the data for a simulation\n",
        "        -  calls FACTS with generated data\n",
        "        -  process the MCMC output\n",
        "        -  accumulate the statistics for the overall operating\n",
        "            characteristics to be computed\n",
        "    c.  Output the resulting OCs\n",
        "\n",
        "## runFACTS() Usage Notes\n",
        "\n",
        "### Run FACTS MCMC Model from R\n",
        "\n",
        "```{default}\n",
        "runFACTS(\n",
        " engine, \n",
        " data.file = “patients.dat”, \n",
        " param.file = “nuk1_e.param, \n",
        " mcmc.file.num = 0, \n",
        " rng.seed = 1, \n",
        " exec.path = getwd()\n",
        ")\n",
        "```\n",
        "\n",
        "**Return Value**: runFACTS returns a TRUE/FALSE to indicate a successful/failed execution. In case of errors, R error messages may be printed and in case of a FACTS execution error, a file called ‘error.txt’ will be output, containing the error description.\n",
        "\n",
        "**Arguments**:\n",
        "\n",
        "- **engine**: Name of the FACTS engine to use. Can be one of the following:\n",
        "    1.  For Core Engines: “contin”, “dichot”, “ME”, “TTE”\n",
        "    2.  For Enrichment Design Engines: “ed_contin”, “ed_dichot”, “ed_tte”\n",
        "\n",
        "- **data.file**: Name of the input data file. Default is “patients.dat”. This file format should exactly match the file format of the ‘patients’ file corresponding to the ones produced by FACTS for the design you setup in FACTS to specify the analysis model. (See the FACTS Execution Guide under the FACTS Help menu for details.)\n",
        "\n",
        "- **param.file**: Name of the FACTS ‘.param’ file that specifies the model setup. Default is ‘nuk1_e.param’.\n",
        "\n",
        "- **mcmc.file.num**: The MCMC output is written to a file named ‘mcmcNNNNN.csv. This argument set the NNNNN. Therefore, mcmc.file.num = 1 will create an MCMC output file called mcmc00001.csv. Default value is 0.\n",
        "\n",
        "- **rng.seed**: Integer-valued random number generator seed. Will use the value from the ‘.param’ file if unspecified.\n",
        "\n",
        "- **exec.path** The path to the directory where the FACTS executable program is available. Default is the current working directory.\n",
        "\n",
        "\n",
        "### Set Up Files and Folders\n",
        "\n",
        "It is important to pass files and parameters correctly, as there is not\n",
        "much in the way of helpful error messaging. Setting up the required\n",
        "folder and files is not hard but should be done carefully. The following\n",
        "example shows how.\n",
        "\n",
        "# Example\n",
        "\n",
        "The paths and file names in the following examples are based on this\n",
        "example folder structure:\n",
        "\n",
        "The top level folder containing\n",
        "\n",
        "- The folder “Example” where we will run FACTS.\n",
        "- The folder “WindowsExecutables” where the executable FACTS simulators are located.\n",
        "- The factR.R file.\n",
        "- The facts file “core-dichot-example.facts” use to generate the parameter file used in this example.\n",
        "- The folder “core-dichot-example_results” where we can find a parameter file once we have run a simulation.\n",
        "\n",
        "![](FACTSfromRattachments/media/image2.png){#fig-1}\n",
        "\n",
        "Within the Example folder there are just 2 files:\n",
        "\n",
        "- a copy of the facts parameter file from the example where we have defined the FACTS analysis to be performed,\n",
        "- the R file containing the code that will simulate our data, call FACTS and analyze the MCMC results.\n",
        "\n",
        "![](FACTSfromRattachments/media/image3.png){#fig-2}\n",
        "\n",
        "1.  “Example” is the folder where the parameter file and patient data\n",
        "    must be located, and where the MCMC files are written. In our R\n",
        "    session, we make it the working directory.\n",
        "    \n",
        "    `setwd(“z:/FACTS test/FACTS 6 Training/FACTS R interface/Example”)`\n",
        "\n",
        "2.  The factR.R file is located in the parent folder:\n",
        "    \n",
        "    `FactR.src = “../factR.R”`\n",
        "\n",
        "3.  The folder containing the FACTS executable files is in the parent\n",
        "    folder:\n",
        "    \n",
        "    `Exec.dir = “../WindowsExecutables”`\n",
        "\n",
        "## The “core.dichot.example.facts”\n",
        "\n",
        "In this example we wish to use FACTS to fit a simple NDLM dose response\n",
        "model across 6 arms (control & 5 doses) with a dichotomous endpoint.\n",
        "\n",
        "We have entered the following parameters:\n",
        "\n",
        "- Study:\n",
        "  - Study Info:\n",
        "    - Non-adaptive\n",
        "    - Recruit subjects continuously\n",
        "    - Max subjects: 300\n",
        "    - Response is a positive outcome\n",
        "    - Time to final endpoint: 4 weeks\n",
        "  - Treatment Arms:\n",
        "    - Control and 5 doses with strengths 1, 2, … 5\n",
        "- Virtual Subject Response\n",
        "  - Explicitly defined\n",
        "    - Dose Response\n",
        "      - responses: 0.1, 0.1, 0.125, 0.15, 0.2, 0.25\n",
        "- Execution\n",
        "  - Accrual\n",
        "    - 1 region with mean accrual of 5 subjects per week\n",
        "  - Dropout\n",
        "    - No dropouts\n",
        "- Quantities of Interest\n",
        "  - Posterior probability: Pr(P_d \\> P_Control)\n",
        "  - Probability of being target: Pr(Max)\n",
        "  - Decision Quantity: Pr(P_d \\> P_Contorl); d=Greatest Pr(Max)\n",
        "- Design\n",
        "  - Dose Response\n",
        "    - Simple NDLM\n",
        "      - Initial Dose ~N(0,2<sup>2</sup>)\n",
        "      - Tau IG(1,1) “central value”, “weight”\n",
        "  - Requentist analysis: none\n",
        "  - Allocation: 1:1:1:1:1:1\n",
        "  - Success/Futility Criteria\n",
        "    - Success: Pr(P_d \\> P_Control); d= Greatest Pr(Max) \\> 0.9\n",
        "\n",
        "Not all these parameters will effect our analysis, but we have to enter\n",
        "sufficient parameters to be able to run a simulation and get a\n",
        "bin1_e.param file. This can be found in the scenario simulation results\n",
        "folder. We only need to run 1 simulation on order to have one written\n",
        "out. This file is copied to our “Example” directory. If we want to\n",
        "change something in the analysis – the model or the prior for example,\n",
        "we can modify this facts file, re-run one simulation, and copy the new\n",
        "bin1_e.param file.\n",
        "\n",
        "## dichot-demo.R\n",
        "\n",
        "We start by setting the current working directory to the “Example”\n",
        "folder, and setting up some file locations and sourcing the factR.R\n",
        "file.\n",
        "\n",
        "```{default}\n",
        "## Set up Folders and Paths\n",
        "\n",
        "# This is the directory where the parameter file and patient data must be located\n",
        "# It will be where the MCMCM files are written\n",
        "setwd(\"Z:/FACTS test/FACTS 6 Training/FACTS R interface/Example\")\n",
        "\n",
        "# This must be the location of the factR.R file\n",
        "FactR.src = \"../factR.R\"\n",
        "\n",
        "# This must be the location of the executable files\n",
        "Exec.dir = \"../WindowsExecutables\"\n",
        "\n",
        "# Load runFACTS\n",
        "source(FactR.src)\n",
        "```\n",
        "\n",
        "We can then copy an example patients file from the simulation results\n",
        "and check that we can run facts.\n",
        "\n",
        "```{default}\n",
        "# Test to check its working\n",
        "# Copy an example patients file from the simulations results to this folder before running.\n",
        "system.time(\n",
        "  runFACTS(\n",
        "    engine='dichot', \n",
        "    data.file = 'patients00001.csv', \n",
        "    param.file = 'bin1_e.param', \n",
        "    mcmc.file.num = 1, \n",
        "    rng.seed = 1, \n",
        "    exec.path = Exec.dir\n",
        "  )\n",
        ")\n",
        "```\n",
        "\n",
        "### genBinaryData()\n",
        "\n",
        "We now define a simple function to generate the data for a single run of FACTS.\n",
        "\n",
        "```{default}\n",
        "# generates a data frame that can be used to drive a FACTS analysis\n",
        "# dichotomous endpoint\n",
        "# no visits\n",
        "# n.per.arm: int, the number of subjects to be simulated for each arm\n",
        "# rates: int[], the response rate to be simulated for each arm\n",
        "# the length if rates defines the number of arms\n",
        "# returns a dataframe with n.per.arm * length(rates) simulated subjects\n",
        "\n",
        "genBinaryData <- function(nPerArm, rates) {\n",
        "  \n",
        "  patientID <- 1:(nPerArm * length(rates)) # Generate a list of patients\n",
        "  region <- rep(1, nPerArm * length(rates)) # all patients come from region 1\n",
        "  date <- 1:(nPerArm * length(rates)) # Generate a list of enrolment dates - here simply one per day\n",
        "  doseAlloc <- rep(1:length(rates), each = nPerArm) # Allocate patients equally to each dose\n",
        "  lastVisit <- rep(1, nPerArm * length(rates)) # all patients have last visit data\n",
        "  dropout <- rep(0, nPerArm * length(rates)) # no patients have dropped out\n",
        "  baseline <- rep(-9999, nPerArm * length(rates)) # not simulating baseline\n",
        "  visit1 <- rep(0, nPerArm * length(rates)) # create the outcome vector\n",
        "\n",
        "  for (d in 1:length(rates)){ # get responses for each dose\n",
        "  ix <- which(doseAlloc == d) # get indices of patients on dose d\n",
        "  # assign them a final response based on the rate to simulate for dose d\n",
        "  if (length(ix) > 0) {\n",
        "  visit1[ix] <- \n",
        "    sample(\n",
        "     c(0,1), \n",
        "     size = length(ix), \n",
        "      replace = TRUE, \n",
        "      prob = c(1-rates[d], rates[d])\n",
        "    )\n",
        "  }\n",
        "  \n",
        "}\n",
        "\n",
        "dat <- data.frame(\n",
        "  SubjectID = patientID, \n",
        "  Region = region, \n",
        "  Date = date, \n",
        "  Dose = doseAlloc, \n",
        "  LastVisit = lastVisit, \n",
        "  Dropout = dropout, \n",
        "  Baseline = baseline, \n",
        "  Visit1 = visit1, \n",
        "  row.names = NULL\n",
        ")\n",
        "\n",
        "return(dat)\n",
        "}\n",
        "```\n",
        "\n",
        "### runSims\n",
        "\n",
        "```{default}\n",
        "########### Toy Example Trial Sim ##########\n",
        "### Constants\n",
        "DATAFILE = \"patients.csv\"\n",
        "MCMCFILE = \"mcmc00000.csv\"\n",
        "# function to simulate an example data set with dichotomous endpoint\n",
        "# nSims - the number of sims to run\n",
        "# nBurnin - the number of MCMC smaples to discard\n",
        "# (the number of MCMC samples is specified in the parameter file)\n",
        "# details - a boolean. If TRUE the function returns a data frame with\n",
        "# the results of each individual simulation,\n",
        "# otherwise just the win proportion and probabilities of being control\n",
        "\n",
        "runSims <- function(\n",
        "    nSims = 10, \n",
        "    nBurnin = 1000, \n",
        "    rates = c(0.1, 0.1, 0.125, 0.15, 0.2, 0.25),\n",
        "    details = FALSE\n",
        ") {\n",
        "\n",
        "winPpn = 0\n",
        "pr.gt.ctl.sum <- rep(0, length(rates) - 1)\n",
        "if (details) {\n",
        "perSim <- data.frame(Sim = 1)\n",
        "}\n",
        "\n",
        "for(sim in 1:nSims) {\n",
        "dat = genBinaryData(nPerArm = 50, rates = rates)\n",
        "write.csv(dat,DATAFILE, row.names = FALSE)\n",
        "if (details) {\n",
        "perSim[sim, \"Sim\"] <- sim\n",
        "# record true rates and observed rates\n",
        "for (d in 1:length(rates)) {\n",
        "perSim[sim, paste(\"sim.rate.\", d, sep=\"\")] <- rates[d]\n",
        "}\n",
        "\n",
        "for (d in 1:length(rates)) {\n",
        "perSim[sim, paste(\"obs.rate.\", d, sep=\"\")] <- mean(dat[dat[,\"Dose\"]==d, \"Visit1\"])\n",
        "}\n",
        "}\n",
        "\n",
        "cat(\"run FACTS: \", sim, \"\\n\")\n",
        "\n",
        "ret <- \n",
        "  runFACTS(\n",
        "    engine = 'dichot', \n",
        "    data.file = DATAFILE, \n",
        "    param.file = 'bin1_e.param', \n",
        "    mcmc.file.num = 0, \n",
        "    rng.seed = sim, \n",
        "    exec.path = Exec.dir\n",
        "  )\n",
        "\n",
        "dat = read.csv(MCMCFILE, skip = 1)\n",
        "\n",
        "# discard burnin rows and just estimates of rate - the \"Pi\" columns\n",
        "dat = dat[(nBurnin + 1):nrow(dat), grep(\"Pi\", names(dat))]\n",
        "\n",
        "if (details) {\n",
        "# record est rate\n",
        "for (d in 1:length(rates)) {\n",
        "perSim[sim, paste(\"est.rate.\", d, sep=\"\")] <- mean(dat[,paste(\"Pi.\", d, sep=\"\")])\n",
        "}\n",
        "}\n",
        "\n",
        "# success if the first dose is not in the top 2 .. i.e. the resposnse on any 2 doses is > control\n",
        "\n",
        "success <- apply(dat, 1, FUN = function(x) {ifelse(length(x) - which(order(x)==1) >= 2, 1, 0)})\n",
        "\n",
        "if (details) {\n",
        "perSim[sim, \"Pr.Success\"] <- mean(success)\n",
        "perSim[sim, \"Success.flag\"] <- ifelse(mean(success) > 0.9, 1,0)\n",
        "}\n",
        "\n",
        "winPpn = winPpn + ifelse(mean(success) > 0.9, 1,0)\n",
        "\n",
        "# example: calc pr(theta_d > theta_ctl)\n",
        "gt.ctl.flag <- apply(dat, 1, FUN = function(x){x[2:length(x)] > x[1]})\n",
        "pr.gt.ctl <- apply(gt.ctl.flag,1,sum)\n",
        "pr.gt.ctl <- pr.gt.ctl / length(gt.ctl.flag[1,])\n",
        "pr.gt.ctl.sum <- pr.gt.ctl.sum + pr.gt.ctl\n",
        "\n",
        "if (details) {\n",
        "for (d in 1:length(pr.gt.ctl)) {\n",
        "perSim[sim, paste(\"Pr.pi.\", d+1, \">pi_ctl\", sep=\"\")] <- pr.gt.ctl[d]\n",
        "    }\n",
        "  }\n",
        "}\n",
        "\n",
        "cat(\"win proportion: \", winPpn/nSims, \"\\n\")\n",
        "\n",
        "if (details) {\n",
        "return (list(winPpn/nSims, pr.gt.ctl.sum/nSims, perSim))\n",
        "} else {\n",
        "return (list(winPpn/nSims, pr.gt.ctl.sum/nSims))\n",
        "}\n",
        "}\n",
        "```\n",
        "\n",
        "### Running the Example\n",
        "\n",
        "Having sourced the above functions and variables holding paths and\n",
        "fllenames we can run the simulations with the default scenario:\n",
        "\n",
        "```{default}\n",
        "runSims(details=FALSE)\n",
        "\n",
        "> run FACTS: 1\n",
        "> run FACTS: 2\n",
        "> run FACTS: 3\n",
        "> run FACTS: 4\n",
        "> run FACTS: 5\n",
        "> run FACTS: 6\n",
        "> run FACTS: 7\n",
        "> run FACTS: 8\n",
        "> run FACTS: 9\n",
        "> run FACTS: 10\n",
        "> win proportion: 0.3\n",
        "\n",
        "> [[1]]\n",
        "> [1] 0.3\n",
        "\n",
        "> [[2]]\n",
        "> Pi.2 Pi.3 Pi.4 Pi.5 Pi.6\n",
        "> 0.30572 0.45824 0.51936 0.77944 0.92916\n",
        "```\n",
        "\n",
        "If “details” is set to TRUE then the list of results has a dataframe at\n",
        "the end that contains a row per simulation and details of that\n",
        "simulations results.\n",
        "\n",
        "Hopefully this is sufficient to get you started."
      ],
      "id": "86bcaa72"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Library/Frameworks/Python.framework/Versions/3.13/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}